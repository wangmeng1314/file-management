{
  "title": "RPC DEMO 设计",
  "cells": [
    {
      "type": "markdown",
      "data": "- 通信协议设计\n  - 元信息\n    - 服务完整名称\n    - 方法名\n    - 等等\n  - 机器地址信息\n  - 注册服务\n- 注册中心设计\n- 消费者 提供者划分\n- 路由如何做\n- 分离关注点\n- 分析测试问题的根源\n\n思考一下，目前最常用的日志框架是logback，其支持日志的异步写入，也就是说，基本的原理是有一个async appender，和fileappender呈现级联的形式，类似于线程池的处理方式，来不及处理的日志将会丢弃。\n\n那假如我们的日志是在高并发的场景下使用，本质上这是一个消费者模型，会否因为队列的长度或者相关配置导致日志丢失，出现业务数据丢失。"
    }
  ]
}